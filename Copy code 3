import numpy as np
from scipy.stats import norm

# Predicted probabilities for each class
pred_probs = res.model.predict(res.params, which="prob")  # (n_samples, 3)
observed = df["Economy_state_dummy"].cat.codes  # 0=poor, 1=normal, 2=good

# Surrogate residual function
def surrogate_residuals(y, probs, link="logit"):
    r = []
    for i, yi in enumerate(y):
        cdf = np.cumsum(probs[i])   # cumulative probabilities

        lower = 0.0 if yi == 0 else cdf[yi-1]
        upper = cdf[yi]

        # Draw a random uniform in (lower, upper)
        u = np.random.uniform(lower, upper)

        # Inverse link (logit or probit)
        if link == "logit":
            s = np.log(u / (1 - u))   # logit^-1
        elif link == "probit":
            s = norm.ppf(u)          # Φ^-1
        else:
            raise ValueError("link must be 'logit' or 'probit'")
        r.append(s)
    return np.array(r)

# Compute surrogate residuals
surr_resid = surrogate_residuals(observed, pred_probs, link="logit")







import matplotlib.pyplot as plt
from statsmodels.graphics.tsaplots import plot_acf
from statsmodels.stats.stattools import durbin_watson
from statsmodels.tsa.stattools import adfuller
from statsmodels.stats.diagnostic import acorr_ljungbox

# ACF plot
plot_acf(surr_resid, lags=20)
plt.show()

# Durbin-Watson
dw_stat = durbin_watson(surr_resid)
print("Durbin–Watson:", dw_stat)  # ~2 = no autocorrelation

# ADF stationarity test
adf_stat, pval, _, _, _, _ = adfuller(surr_resid)
print("ADF statistic:", adf_stat, " p-value:", pval)
# p < 0.05 => residuals are stationary

# Ljung-Box test for autocorrelation
lb = acorr_ljungbox(surr_resid, lags=[10], return_df=True)
print(lb)