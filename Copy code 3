import pandas as pd
import statsmodels.api as sm

def fit_mnl_models(data, target='Economy_State_dummy', base_category='Normal'):
    # Ensure dependent variable is categorical and base is first
    data[target] = pd.Categorical(data[target])
    data[target] = data[target].cat.reorder_categories(
        [base_category] + [cat for cat in data[target].cat.categories if cat != base_category],
        ordered=False
    )
    
    # Get the categories after reordering
    categories = data[target].cat.categories.tolist()
    # The baseline category is categories[0], the rest are non-baseline
    non_baseline_cats = categories[1:]  # e.g. ['Boom', 'Recession']
    print(non_baseline_cats)
    
    results_list = []
    exclude_cols = ['Date', target]
    independent_vars = [col for col in data.columns if col not in exclude_cols]

    for var in independent_vars:
        try:
            sub_data = data[[target, var]].dropna()
            X = sm.add_constant(sub_data[[var]])
            y = sub_data[target]

            model = sm.MNLogit(y, X).fit(disp=False)
            
            # The model.params DataFrame has a MultiIndex like:
            #    index: categories (non-baseline categories)
            #    columns: ['const', var]
            # We'll iterate over rows (categories) and columns (coefficients)
            for cat in model.params.index:
                for coef_name in model.params.columns:
                    coef_label = f"{cat}.{coef_name}"  # e.g. Boom.const or Boom.Income
                    results_list.append({
                        'Independent_Var': var,
                        'Coefficient': coef_label,
                        'Beta': model.params.loc[cat, coef_name],
                        'P-Value': model.pvalues.loc[cat, coef_name],
                        'T-Stat': model.tvalues.loc[cat, coef_name],
                        'Pseudo_R2': model.prsquared,
                        'AIC': model.aic,
                        'BIC': model.bic
                    })

        except Exception as e:
            print(f"Model failed for variable {var}: {e}")

    return pd.DataFrame(results_list)
