import numpy as np
from scipy.stats import norm

# Predicted probabilities for each class
pred_probs = res.model.predict(res.params, which="prob")  # (n_samples, 3)
observed = df["Economy_state_dummy"].cat.codes  # 0=poor, 1=normal, 2=good

# Surrogate residual function
def surrogate_residuals(y, probs, link="logit"):
    r = []
    for i, yi in enumerate(y):
        cdf = np.cumsum(probs[i])   # cumulative probabilities

        lower = 0.0 if yi == 0 else cdf[yi-1]
        upper = cdf[yi]

        # Draw a random uniform in (lower, upper)
        u = np.random.uniform(lower, upper)

        # Inverse link (logit or probit)
        if link == "logit":
            s = np.log(u / (1 - u))   # logit^-1
        elif link == "probit":
            s = norm.ppf(u)          # Î¦^-1
        else:
            raise ValueError("link must be 'logit' or 'probit'")
        r.append(s)
    return np.array(r)

# Compute surrogate residuals
surr_resid = surrogate_residuals(observed, pred_probs, link="logit")