import pandas as pd
import statsmodels.api as sm

def fit_mnl_models(data, target='Economy_state_dummy', base_category='normal'):
    data[target] = pd.Categorical(data[target])
    data[target] = data[target].cat.reorder_categories(
        [base_category] + [cat for cat in data[target].cat.categories if cat != base_category],
        ordered=False
    )

    results_list = []
    exclude_cols = ['Date', target]
    independent_vars = [col for col in data.columns if col not in exclude_cols]

    for var in independent_vars:
        try:
            sub_data = data[[target, var]].dropna()
            X = sm.add_constant(sub_data[[var]])
            y = sub_data[target]

            model = sm.MNLogit(y, X).fit(disp=False)

            # Handle both flat and MultiIndex
            index = model.params.index
            if isinstance(index, pd.MultiIndex):
                outcomes = index.levels[0]
            else:
                outcomes = sorted(set([idx[0] for idx in index]))

            for outcome in outcomes:
                const_idx = (outcome, 'const') if isinstance(index, pd.MultiIndex) else f'{outcome}_const'
                var_idx = (outcome, var) if isinstance(index, pd.MultiIndex) else f'{outcome}_{var}'

                results_list.append({
                    'Level': outcome,
                    'Independent_Var': var,
                    'Const_Beta': model.params.loc[const_idx],
                    'Const_P': model.pvalues.loc[const_idx],
                    'Const_T': model.tvalues.loc[const_idx],
                    'Var_Beta': model.params.loc[var_idx],
                    'Var_P': model.pvalues.loc[var_idx],
                    'Var_T': model.tvalues.loc[var_idx],
                    'Pseudo_R2': model.prsquared,
                    'AIC': model.aic,
                    'BIC': model.bic
                })

        except Exception as e:
            print(f"Model failed for variable {var}: {e}")

    return pd.DataFrame(results_list)
