def fit_mnl_models_spark(spark_df, dep_var="Economy_state_dummy", base_category="Normal"):
    from pyspark.ml.feature import StringIndexer, VectorAssembler
    from pyspark.ml.classification import LogisticRegression
    import pandas as pd

    result_rows = []

    # Step 1: Encode the label (target) with base category first
    label_indexer = StringIndexer(inputCol=dep_var, outputCol="label").fit(spark_df)
    labels = label_indexer.labels
    spark_df = label_indexer.transform(spark_df)

    # Step 2: Independent variables (exclude Date and target columns)
    independent_vars = [col for col in spark_df.columns if col not in [dep_var, "Date", "label"]]

    for var in independent_vars:
        try:
            # Step 3: Assemble features
            assembler = VectorAssembler(inputCols=[var], outputCol="features")
            df_model = assembler.transform(spark_df).select("features", "label")

            # Step 4: Fit multinomial logistic regression
            lr = LogisticRegression(featuresCol="features", labelCol="label", family="multinomial")
            lr_model = lr.fit(df_model)
            summary = lr_model.summary

            # Step 5: Extract coefficients
            coefficients = lr_model.coefficientMatrix.toArray()
            intercepts = lr_model.interceptVector.toArray()

            for i, cls in enumerate(labels):
                result_rows.append({
                    'Variable': var,
                    'Category': cls,
                    'Intercept': intercepts[i],
                    'Coefficient': coefficients[i][0],
                    'Accuracy': summary.accuracy,
                    'F1 Score': summary.fMeasureByLabel()[i],
                    'LogLoss': summary.logLoss
                })

        except Exception as e:
            print(f"Model failed for variable '{var}': {e}")
            continue

    return pd.DataFrame(result_rows)
