import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Step 1: Define observed PD scores and defaults
pd_scores = np.array([
    6.6, 5.9, 6.1, 7.4, 7.2, 7.9, 5.1, 4.6, 7.9, 7.5,
    6.2, 4.8, 8.2, 6.8, 5.2, 6.0, 3.6, 7.7, 6.2, 6.3,
    8.7, 6.1, 6.2, 6.9, 4.6, 8.2, 5.7
])

defaults = np.array([
    0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 
    0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 
    0, 0, 0, 0, 0, 0, 0
])

# Step 2: Define risk rating buckets and expected master scale default rates
rating_buckets = ["AAA", "AA", "A", "BBB", "BB", "B", "CCC"]
bucket_quantiles = [0.10, 0.30, 0.50, 0.70, 0.85, 0.95, 1.00]  # Quantile cutoffs
master_scale_defaults = [0.0001, 0.001, 0.005, 0.015, 0.05, 0.10, 0.25]  # Expected default rates

# Step 3: Assign PD scores to rating buckets based on quantiles
sorted_pd_scores = np.sort(pd_scores)
quantile_cutoffs = np.quantile(sorted_pd_scores, bucket_quantiles)

def assign_bucket(pd_score):
    for i, cutoff in enumerate(quantile_cutoffs):
        if pd_score <= cutoff:
            return rating_buckets[i]
    return rating_buckets[-1]

pd_buckets = np.array([assign_bucket(score) for score in pd_scores])

# Step 4: Compute empirical default rate per bucket
bucket_defaults = {bucket: [] for bucket in rating_buckets}
for i, bucket in enumerate(pd_buckets):
    bucket_defaults[bucket].append(defaults[i])

empirical_default_rates = {bucket: np.mean(values) if values else 0 for bucket, values in bucket_defaults.items()}

# Step 5: Map empirical default rates to master scale
adjusted_pd_mapping = {bucket: master_scale_defaults[i] for i, bucket in enumerate(rating_buckets)}
adjusted_pds = np.array([adjusted_pd_mapping[bucket] for bucket in pd_buckets])

# Step 6: Compute scaling factor to match target CT value (0.4%)
target_ct_value = 0.004  # 0.4%
current_avg_adjusted_pd = np.mean(adjusted_pds)  # Current average PD

scaling_factor = target_ct_value / current_avg_adjusted_pd if current_avg_adjusted_pd > 0 else 1
final_adjusted_pds = adjusted_pds * scaling_factor  # Scale all PDs proportionally

# Step 7: Create DataFrame and Print Results
df = pd.DataFrame({
    "PD Score": pd_scores,
    "Assigned Rating": pd_buckets,
    "Raw Default Rate": [empirical_default_rates[bucket] for bucket in pd_buckets],
    "Adjusted PD": adjusted_pds,
    "Final Adjusted PD": final_adjusted_pds
})

print("=== PD Calibration with QMM and Target CT Value (0.4%) ===")
print(df.sort_values(by="PD Score"))

# Visualization: PD Score vs. Adjusted PDs
plt.figure(figsize=(8, 5))
plt.scatter(pd_scores, adjusted_pds, color='red', label="QMM Adjusted PDs")
plt.scatter(pd_scores, final_adjusted_pds, color='blue', label="Final Adjusted PDs (Target 0.4%)")
plt.xlabel("PD Score")
plt.ylabel("Probability of Default")
plt.title("QMM Calibration: Adjusted PDs vs. Final Adjusted PDs")
plt.legend()
plt.show()
